/*
 This file is part of JScreenRecorder v0.3

 JScreenRecorder is free software: you can redistribute it and/or modify
 it under the terms of the GNU Lesser General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 JScreenRecorder is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with JScreenRecorder.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.deepak.jscreenrecorder.gui;

import com.deepak.jscreenrecorder.core.config.RecordConfig;
import java.awt.Frame;
import java.awt.Insets;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Toolkit;

/**
 *
 * @author deepak
 */
// this class impliments the capture area selector
public class CaptureAreaSelector extends javax.swing.JFrame {

    // the local record config reference object
    private RecordConfig recConfig = null;
    // is full screen flag
    private boolean isFullScreen = false;

    // constructor with the record config as parameter
    public CaptureAreaSelector(RecordConfig rc) {
        // initilise components
        initComponents();
        // set the record config reference
        this.recConfig = rc;
        // if the record config is not null and there is already a capture area selected
        if (recConfig != null && recConfig.getFrameDimension() != null) {
            // check if the capture area dimension is same as the screen size . ie full screen
            if (recConfig.getFrameDimension().getSize() == Toolkit.getDefaultToolkit().getScreenSize()) {
                // if so the set the full screen flag to true
                isFullScreen = true;
                // set the current windoe to maximized state
                this.setExtendedState(Frame.MAXIMIZED_BOTH);
            } else {
                // calculate the frame insets
                // as we are setting the capture area bounds as that of the 
                // inner trans panel, so if we directlyu set that bound to the 
                // frame every time we open the selector frame its size gets 
                // reduced as the trans panel size is less then that of the frame
                Insets i = this.getInsets();
                Rectangle r = recConfig.getFrameDimension();
                // add the frame dimension values to the capture area dimension
                int w = i.left + i.right + r.width;
                int h = i.top + i.bottom + r.height;
                int x = r.x - i.left;
                int y = r.y - i.top;
                // else set the current window bounds to the calculated one
                this.setBounds(x, y, w, h);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        transPanel = new com.deepak.transpanel.bean.TransPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Capture Area Selector");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                windowClosingEvent(evt);
            }
        });
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                windowStateChangedEvent(evt);
            }
        });

        transPanel.setToolTipText("Area to be Captured");

        javax.swing.GroupLayout transPanelLayout = new javax.swing.GroupLayout(transPanel);
        transPanel.setLayout(transPanelLayout);
        transPanelLayout.setHorizontalGroup(
            transPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        transPanelLayout.setVerticalGroup(
            transPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(transPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(transPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // on window closing 
    private void windowClosingEvent(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_windowClosingEvent
        // TODO add your handling code here:
        // if the record config is not null then
        if (recConfig != null) {
            // if the full screen flag is set then set the capture area dimension as that of the screen
            if (isFullScreen) {
                recConfig.setFrameDimension(new Rectangle(new Point(0, 0), Toolkit.getDefaultToolkit().getScreenSize()));
            } else {
                // else set the capture area bounds same as the trans panel bounds
                recConfig.setFrameDimension(new Rectangle(transPanel.getLocationOnScreen(), transPanel.getSize()));
            }
        }
    }//GEN-LAST:event_windowClosingEvent

    // on window state change 
    private void windowStateChangedEvent(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_windowStateChangedEvent
        // TODO add your handling code here:
        // if window maximized
        if (evt.getNewState() == Frame.MAXIMIZED_BOTH) {
            // set fullscreen as true
            isFullScreen = true;
        } else {
            isFullScreen = false;
        }
    }//GEN-LAST:event_windowStateChangedEvent
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.deepak.transpanel.bean.TransPanel transPanel;
    // End of variables declaration//GEN-END:variables

    // getter and setter for the record config
    public RecordConfig getRecConfig() {
        return recConfig;
    }

    public void setRecConfig(RecordConfig recConfig) {
        this.recConfig = recConfig;
    }
}
