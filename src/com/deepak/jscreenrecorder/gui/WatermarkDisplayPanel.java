/*
 This file is part of JScreenRecorder v0.3

 JScreenRecorder is free software: you can redistribute it and/or modify
 it under the terms of the GNU Lesser General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 JScreenRecorder is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with JScreenRecorder.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.deepak.jscreenrecorder.gui;

import java.awt.AlphaComposite;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;

/**
 *
 * @author deepak
 */
// this class impliments a panel to dispay the watermark image
public class WatermarkDisplayPanel extends javax.swing.JPanel {

    // the local refernce to the watermark image
    private BufferedImage watermarkImage = null;
    // the alpha value for the transparency
    private float watermarkAlpha = 0.0f;
    // the final watermark image which is created based on the 
    // watermark image and the alpha transparency value
    private BufferedImage finalWatermarkImage = null;
    // the final watermark image graphics reference object
    private Graphics2D finalWatermarkImageGraphics = null;

    // the default constructor
    public WatermarkDisplayPanel() {
        // set the default watermark transparency alpha value
        watermarkAlpha = 0.5f;
        // initilise the components
        initComponents();
    }

    // the overriden paint method of the watermark display panel
    @Override
    public void paint(Graphics g) {
        // paint the panel
        super.paint(g);
        // if the watermark image is not null then
        if (watermarkImage != null) {
            // get the watermark image width
            int w = watermarkImage.getWidth();
            // get the watermark image height
            int h = watermarkImage.getHeight();
            // create finalwatermark image with resolution of the current watermark image
            finalWatermarkImage = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB_PRE);
            // get the graphics object refernce
            finalWatermarkImageGraphics = finalWatermarkImage.createGraphics();
            // set the alpha transparency 
            finalWatermarkImageGraphics.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, watermarkAlpha));
            // draw watermark image on final watermark image
            finalWatermarkImageGraphics.drawImage(watermarkImage, 0, 0, this);
            // dispose all final watermark graphics resources
            finalWatermarkImageGraphics.dispose();
            // draw finalwatermark image on panel at the centre      
            g.drawImage(finalWatermarkImage, (this.getWidth() / 2) - (w / 2), (this.getHeight() / 2) - (h / 2), this);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 174, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 134, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    // getter for the watermark image
    public BufferedImage getWatermarkImage() {
        return watermarkImage;
    }

    // setter for the watermark image
    public void setWatermarkImage(BufferedImage watermarkImage) {
        this.watermarkImage = watermarkImage;
        // on setting the watermark image repaint the panel
        this.repaint();
    }

    // getter for the watermakr alpha value
    public float getWatermarkAlpha() {
        return watermarkAlpha;
    }

    // setter for the watermakr alpha value
    public void setWatermarkAlpha(float watermarkAlpha) {
        this.watermarkAlpha = watermarkAlpha;
        // on setting the watermark alpha value repaint the panel
        this.repaint();
    }

    // getter for the final watermark image
    public BufferedImage getFinalWatermarkImage() {
        return finalWatermarkImage;
    }
}
