/*
 This file is part of JScreenRecorder v0.3

 JScreenRecorder is free software: you can redistribute it and/or modify
 it under the terms of the GNU Lesser General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 JScreenRecorder is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with JScreenRecorder.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.deepak.jscreenrecorder.gui;

import java.awt.Graphics;
import java.awt.Point;
import java.awt.image.BufferedImage;

/**
 *
 * @author deepak
 */

// this class impliments panel for the watermark position selection
public class WatermarkPositionPanel extends javax.swing.JPanel {

    // set the default position as null
    private Point position = null;
    // the watermark image
    private BufferedImage watermark = null;
    // the watermark image width
    private int watermarkWidth = 0;
    // the watermark image height
    private int watermarkHeight = 0;

    // default constructor
    public WatermarkPositionPanel() {
        // initilise the components
        initComponents();
    }

    // constructor with the watermark image as the parameter
    public WatermarkPositionPanel(BufferedImage watermarkImage) {
        // set the local watermark refernce
        this.watermark = watermarkImage;
        // get the watermark image width
        this.watermarkWidth = this.watermark.getWidth();
        // get the watermark image height
        this.watermarkHeight = this.watermark.getHeight();
        // initilise the components
        initComponents();
    }

    // the overriden paint method
    @Override
    public void paint(Graphics g) {
        try {
            // paint the default panel
            super.paint(g);
            // if watemark image is not null and position is not null then
            if (watermark != null && position != null) {
                // draw the watermark image at the position
                g.drawImage(watermark, position.x, position.y, this);
            }
        } catch (Exception ex) {
            // capture any exception from the transpanel, ignore it
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        transPanel = new com.deepak.transpanel.bean.TransPanel();

        transPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                transPanelMousePressed(evt);
            }
        });
        transPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                transPanelMouseDragged(evt);
            }
        });

        javax.swing.GroupLayout transPanelLayout = new javax.swing.GroupLayout(transPanel);
        transPanel.setLayout(transPanelLayout);
        transPanelLayout.setHorizontalGroup(
            transPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 226, Short.MAX_VALUE)
        );
        transPanelLayout.setVerticalGroup(
            transPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 177, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(transPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(transPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // method called when the trans panel mouse pressed event
    private void transPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_transPanelMousePressed
        // TODO add your handling code here:
        // set calculate and set the position
        calcualtePosition(evt);
    }//GEN-LAST:event_transPanelMousePressed

    // method called when the trans panel mouse dragged event
    private void transPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_transPanelMouseDragged
        // TODO add your handling code here:
        // set calculate and set the position
        calcualtePosition(evt);
    }//GEN-LAST:event_transPanelMouseDragged

    // method to calculate and set the watermark location
    private void calcualtePosition(java.awt.event.MouseEvent evt) {
        // set the positon such that the watermark centers itself at the mouse press coordinates
        position = new Point(evt.getPoint().x - (watermarkWidth / 2), evt.getPoint().y - (watermarkHeight / 2));
        // repaint the watermark position panel
        this.repaint();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.deepak.transpanel.bean.TransPanel transPanel;
    // End of variables declaration//GEN-END:variables

    // getter for position
    public Point getPosition() {
        return position;
    }
}
