/*
 This file is part of JScreenRecorder v0.3

 JScreenRecorder is free software: you can redistribute it and/or modify
 it under the terms of the GNU Lesser General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 JScreenRecorder is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with JScreenRecorder.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.deepak.jscreenrecorder.gui;

import com.deepak.jscreenrecorder.core.TextWatermarkCreator;
import com.deepak.jscreenrecorder.core.config.RecordConfig;
import com.deepak.jscreenrecorder.core.constants.Directory;
import com.deepak.jscreenrecorder.core.constants.Extension;
import com.deepak.jscreenrecorder.core.filters.ImageFileNameFilter;
import com.deepak.jscreenrecorder.util.AddImage;
import com.deepak.jscreenrecorder.util.RandomNumberGenerator;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JOptionPane;

/**
 *
 * @author deepak
 */
// this class provides watermark selection facility
public class WatermarkSelector extends javax.swing.JFrame {

    // the local record config reference object
    private RecordConfig recConfig = null;
    // watermark image array
    private BufferedImage watermarks[] = null;
    // current watermark index
    private int watermarkIndex = 0;

    // method to load watermarks from the watermarks directory
    private void loadWatermarks() {
        // get the file refernce to the watermark directory
        File watermarkDir = new File(Directory.WATERMARK_DB);
        // get all the watermark images
        File watermarkFiles[] = watermarkDir.listFiles(new ImageFileNameFilter());
        // if watermark images are present 
        if (watermarkFiles != null && watermarkFiles.length > 0) {
            // set the watermarks array size as that of the 
            // list count
            watermarks = new BufferedImage[watermarkFiles.length];

            int i = 0;
            // for all watermark files 
            for (File f : watermarkFiles) {
                try {
                    // load it into watermarks array
                    watermarks[i] = ImageIO.read(f);
                    i++;
                } catch (IOException ex) {
                    // no need to notify user
                    ex.printStackTrace();
                }
            }
        } // else if no watermark images are present in the watermarks directory
        else {
            // set the watermarks array size as one
            watermarks = new BufferedImage[1];
            try {
                // load the default watermark image from the jar package
                watermarks[0] = ImageIO.read(getClass().getResource("/com/deepak/jscreenrecorder/gui/resources/watermark.png"));
            } catch (IOException ex) {
                // if could not load the default watermark then notify the user
                JOptionPane.showMessageDialog(rootPane, "No watermarks found in database folder!\nAnd could not load the default watermark!\nPlease add watermark or create one. ", "No Watermark", JOptionPane.WARNING_MESSAGE);
            }
        }
    }

    // default constructor
    public WatermarkSelector() {
        initComponents();
    }

    // constructor with the record config as parameter
    public WatermarkSelector(RecordConfig rc) {
        initComponents();
        // set the local record config referrence
        recConfig = rc;
        // load all watermarks
        loadWatermarks();
        // set watermark selection checkbox as false
        useWatermarkCheckBox.setSelected(false);
        // disable the watermark controls
        watermarkControlsEnable(false);
        // load the first watermark on to the watermark display panel
        watermarkDisplayPanel.setWatermarkImage(watermarks[0]);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        useWatermarkCheckBox = new javax.swing.JCheckBox();
        addButton = new javax.swing.JButton();
        previousButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        alphaSpinner = new javax.swing.JSpinner();
        createTextWatermarkButton = new javax.swing.JButton();
        watermarkDisplayPanel = new com.deepak.jscreenrecorder.gui.WatermarkDisplayPanel();
        watermarkPositionButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Watermark Selection");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                WatermarkSelector.this.windowClosing(evt);
            }
        });

        useWatermarkCheckBox.setText("Use Watermark");
        useWatermarkCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                useWatermarkCheckBoxActionPerformed(evt);
            }
        });

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        previousButton.setText("Previous");
        previousButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previousButtonActionPerformed(evt);
            }
        });

        nextButton.setText("Next");
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        alphaSpinner.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.5f), Float.valueOf(0.0f), Float.valueOf(1.0f), Float.valueOf(0.1f)));
        alphaSpinner.setBorder(javax.swing.BorderFactory.createTitledBorder("Alpha"));
        alphaSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                alphaSpinner_StateChangedEvent(evt);
            }
        });

        createTextWatermarkButton.setText("Create Text Watermark");
        createTextWatermarkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createTextWatermarkButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout watermarkDisplayPanelLayout = new javax.swing.GroupLayout(watermarkDisplayPanel);
        watermarkDisplayPanel.setLayout(watermarkDisplayPanelLayout);
        watermarkDisplayPanelLayout.setHorizontalGroup(
            watermarkDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        watermarkDisplayPanelLayout.setVerticalGroup(
            watermarkDisplayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        watermarkPositionButton.setText("Watermark Position");
        watermarkPositionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                watermarkPositionButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(nextButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(previousButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(alphaSpinner))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(watermarkDisplayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(useWatermarkCheckBox)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(createTextWatermarkButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 81, Short.MAX_VALUE)
                        .addComponent(watermarkPositionButton)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {addButton, nextButton, previousButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(useWatermarkCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nextButton)
                        .addGap(18, 18, 18)
                        .addComponent(previousButton)
                        .addGap(18, 18, 18)
                        .addComponent(addButton)
                        .addGap(18, 18, 18)
                        .addComponent(saveButton)
                        .addGap(18, 18, 18)
                        .addComponent(alphaSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(watermarkDisplayPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createTextWatermarkButton)
                    .addComponent(watermarkPositionButton))
                .addContainerGap())
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-481)/2, (screenSize.height-372)/2, 481, 372);
    }// </editor-fold>//GEN-END:initComponents

    // on window closing event set the watermark onto the record config
    private void windowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_windowClosing
        // TODO add your handling code here:
        // if watermark is selected but no watermark location found then request user to 
        // select a location for the watermark
        if (useWatermarkCheckBox.isSelected() && recConfig.getWatermarkLocation() == null) {
            JOptionPane.showMessageDialog(rootPane, "Watermark Location Not Set!\nPlease select the Watermark location.", "Insufficient Configuration", JOptionPane.WARNING_MESSAGE);
        } else {
            // if watermark is selected then 
            if (useWatermarkCheckBox.isSelected()) {
                // set the watermark image
                recConfig.setWatermarkImage(watermarkDisplayPanel.getFinalWatermarkImage());
            } else {
                // else set the watermark image and location to null
                recConfig.setWatermarkImage(null);
                recConfig.setWatermarkLocation(null);
            }

            // close the window 
            this.setVisible(false);
            this.dispose();
        }

    }//GEN-LAST:event_windowClosing

    // method called when the watermark alpha spinner state is changed
    private void alphaSpinner_StateChangedEvent(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_alphaSpinner_StateChangedEvent
        // TODO add your handling code here:
        // se teh watermark alpha level
        watermarkDisplayPanel.setWatermarkAlpha(Float.parseFloat(alphaSpinner.getValue().toString()));
    }//GEN-LAST:event_alphaSpinner_StateChangedEvent

    // method called when the watermark position button is pressed
    private void watermarkPositionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_watermarkPositionButtonActionPerformed
        // TODO add your handling code here:
        // if the capture are is selected then
        if (recConfig.getFrameDimension() != null) {
            // set the watermark image to the record config from the watermark display panel
            recConfig.setWatermarkImage(watermarkDisplayPanel.getFinalWatermarkImage());
            // display the watermark position selector 
            new WatermarkPositionSelector(recConfig).setVisible(true);
        } else {
            // if the capture area is not set then request user to select one
            JOptionPane.showMessageDialog(rootPane, "Capture area is not set! Please select a capture area.", "Insufficient Configuration", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_watermarkPositionButtonActionPerformed

    // method called when the next watermark button is pressed
    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        // TODO add your handling code here:
        // process only if the watermarks are present
        if (watermarks != null && watermarks.length > 0) {
            // increment the current index
            watermarkIndex = (watermarkIndex + 1) % watermarks.length;
            // set the watermark image at the index to the watermark display panel
            watermarkDisplayPanel.setWatermarkImage(watermarks[watermarkIndex]);
        }
    }//GEN-LAST:event_nextButtonActionPerformed

    // method called when previous watermark button is pressed
    private void previousButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previousButtonActionPerformed
        // TODO add your handling code here:
        // process only if the watermarks are present
        if (watermarks != null && watermarks.length > 0) {
            // increment the current index
            --watermarkIndex;
            // if the index is less than 0 then reset it to the last accessible index
            if (watermarkIndex < 0) {
                watermarkIndex = watermarks.length - 1;
            }
            // set the watermark image at the index to the watermark display panel
            watermarkDisplayPanel.setWatermarkImage(watermarks[watermarkIndex]);
        }
    }//GEN-LAST:event_previousButtonActionPerformed

    // method called when the add watermark button is pressed
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        // TODO add your handling code here:
        // call the addimage class to add watermark images to the watermarks directory
        int watermarkCount = new AddImage().add(Directory.WATERMARK_DB, Extension.WATERMARK_EXTENSION);
        // if the watermark added count is more than zero then
        // notify the user and reload the watermarks images
        if (watermarkCount > 0) {
            loadWatermarks();
            JOptionPane.showMessageDialog(rootPane, watermarkCount + " Watermarks Added to Database Successfully.", "Watermark Add", JOptionPane.INFORMATION_MESSAGE);
        } else {
            // if no watermarks are added then notify the user
            JOptionPane.showMessageDialog(rootPane, "No watermarks added to database!", "Watermark Add", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_addButtonActionPerformed

    // method called when save watermark button is pressed
    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        // if watermark image is not null then
        if (watermarkDisplayPanel.getFinalWatermarkImage() != null) {
            try {
                // write it onto a file with random number file name and watermark file extension
                ImageIO.write(watermarkDisplayPanel.getFinalWatermarkImage(), "png", new File(Directory.WATERMARK_DB + RandomNumberGenerator.getRandomNumber() + Extension.WATERMARK_EXTENSION));
                JOptionPane.showMessageDialog(rootPane, "Watermark Saved to Database Successfully.", "Watermark Save", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(rootPane, "Watermark Save Failed !", "Watermark Save", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    // method called when user selects the use watermark check box
    private void useWatermarkCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_useWatermarkCheckBoxActionPerformed
        // TODO add your handling code here:
        // on select 
        if (useWatermarkCheckBox.isSelected()) {
            // enable the controls
            watermarkControlsEnable(true);
        } else {
            // else disable the controls
            watermarkControlsEnable(false);
        }
    }//GEN-LAST:event_useWatermarkCheckBoxActionPerformed

    // method called when the create text watermark button is pressed
    private void createTextWatermarkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createTextWatermarkButtonActionPerformed
        // TODO add your handling code here:
        // display and create the text watermark creator 
        // with the watermark display panel as the parameter
        new TextWatermarkCreator(watermarkDisplayPanel).createWatermark();
    }//GEN-LAST:event_createTextWatermarkButtonActionPerformed

    // method to enable and disable the watermark controls
    private void watermarkControlsEnable(boolean b) {
        nextButton.setEnabled(b);
        previousButton.setEnabled(b);
        addButton.setEnabled(b);
        saveButton.setEnabled(b);
        alphaSpinner.setEnabled(b);
        createTextWatermarkButton.setEnabled(b);
        watermarkPositionButton.setEnabled(b);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JSpinner alphaSpinner;
    private javax.swing.JButton createTextWatermarkButton;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton previousButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JCheckBox useWatermarkCheckBox;
    private com.deepak.jscreenrecorder.gui.WatermarkDisplayPanel watermarkDisplayPanel;
    private javax.swing.JButton watermarkPositionButton;
    // End of variables declaration//GEN-END:variables
}
