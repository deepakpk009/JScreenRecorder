/*
 This file is part of JScreenRecorder v0.3

 JScreenRecorder is free software: you can redistribute it and/or modify
 it under the terms of the GNU Lesser General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.

 JScreenRecorder is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with JScreenRecorder.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.deepak.jscreenrecorder.gui;

import com.deepak.jscreenrecorder.core.FrameRateSelector;
import com.deepak.jscreenrecorder.core.RecordTimer;
import com.deepak.jscreenrecorder.core.SaveFileChooser;
import com.deepak.jscreenrecorder.core.config.RecordConfig;
import com.deepak.jscreenrecorder.core.recorder.ScreenRecorder;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author deepak
 */
// this class provies implimentation for the record controller panel
public class RecordControlPanel extends javax.swing.JPanel {
    // the local record config reference object 

    private RecordConfig recConfig = null;
    // the record image image
    private ImageIcon record = null;
    // the recording image icon
    private ImageIcon recording = null;
    // is recording flag
    private boolean isRecording = false;
    // the screen recorder object
    private ScreenRecorder screenRecorder = null;

    // the default constructor
    public RecordControlPanel() {
        initComponents();
    }

    // constructor with the record config parameter
    public RecordControlPanel(RecordConfig rc) {
        // initilise components
        initComponents();
        // set the record config refernce
        this.recConfig = rc;
        // load record icons
        loadRecordIcons();
        // create a new scrren recorder object
        screenRecorder = new ScreenRecorder();
    }

    // load the recor icons from the jar resource package
    private void loadRecordIcons() {
        record = new javax.swing.ImageIcon(getClass().getResource("/com/deepak/jscreenrecorder/gui/resources/record.png"));
        recording = new javax.swing.ImageIcon(getClass().getResource("/com/deepak/jscreenrecorder/gui/resources/recording.png"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        recordButtonLabel = new javax.swing.JLabel();
        frameRateButtonLabel = new javax.swing.JLabel();
        captureAreaButtonLabel = new javax.swing.JLabel();
        watermarkButtonLabel = new javax.swing.JLabel();
        cursorButtonLabel = new javax.swing.JLabel();
        saveButtonLabel = new javax.swing.JLabel();
        aboutLabel = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Record Controls"));

        recordButtonLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/deepak/jscreenrecorder/gui/resources/record.png"))); // NOI18N
        recordButtonLabel.setToolTipText("start/stop recording");
        recordButtonLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                recordButton_MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                recordButton_MouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                recordButton_MousePressedEvent(evt);
            }
        });

        frameRateButtonLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/deepak/jscreenrecorder/gui/resources/framerate.png"))); // NOI18N
        frameRateButtonLabel.setToolTipText("set frame rate");
        frameRateButtonLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                frameRateButton_MousePressedEvent(evt);
            }
        });

        captureAreaButtonLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/deepak/jscreenrecorder/gui/resources/areaselect.png"))); // NOI18N
        captureAreaButtonLabel.setToolTipText("select capture area");
        captureAreaButtonLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                captureAreaButton_MousePressedEvent(evt);
            }
        });

        watermarkButtonLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/deepak/jscreenrecorder/gui/resources/watermarkselect.png"))); // NOI18N
        watermarkButtonLabel.setToolTipText("set watermark");
        watermarkButtonLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                watermarkButton_MousePressedEvent(evt);
            }
        });

        cursorButtonLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/deepak/jscreenrecorder/gui/resources/cursorselect.png"))); // NOI18N
        cursorButtonLabel.setToolTipText("select cursor ");
        cursorButtonLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                cursorButton_MousePressedEvent(evt);
            }
        });

        saveButtonLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/deepak/jscreenrecorder/gui/resources/save.png"))); // NOI18N
        saveButtonLabel.setToolTipText("select save location");
        saveButtonLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                saveButton_MousePressedEvent(evt);
            }
        });

        aboutLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/deepak/jscreenrecorder/gui/resources/info.png"))); // NOI18N
        aboutLabel.setToolTipText("about info");
        aboutLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                aboutLabelMousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(recordButtonLabel)
                .addGap(17, 17, 17)
                .addComponent(frameRateButtonLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(captureAreaButtonLabel)
                .addGap(14, 14, 14)
                .addComponent(watermarkButtonLabel)
                .addGap(18, 18, 18)
                .addComponent(cursorButtonLabel)
                .addGap(15, 15, 15)
                .addComponent(saveButtonLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(aboutLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {aboutLabel, captureAreaButtonLabel, cursorButtonLabel, frameRateButtonLabel, recordButtonLabel, saveButtonLabel, watermarkButtonLabel});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(recordButtonLabel)
                        .addComponent(frameRateButtonLabel)
                        .addComponent(captureAreaButtonLabel)
                        .addComponent(watermarkButtonLabel)
                        .addComponent(cursorButtonLabel)
                        .addComponent(saveButtonLabel))
                    .addComponent(aboutLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {aboutLabel, captureAreaButtonLabel, cursorButtonLabel, frameRateButtonLabel, recordButtonLabel, saveButtonLabel, watermarkButtonLabel});

    }// </editor-fold>//GEN-END:initComponents

    // method called when record button is pressed
    private void recordButton_MousePressedEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_recordButton_MousePressedEvent
        // TODO add your handling code here:  
        // check whether the record config is set for recording
        if (isReadyForRecording()) {
            // if its not recording then
            if (!isRecording) {
                // set recording flag as true
                isRecording = true;
                // set the button lable icon to recording
                recordButtonLabel.setIcon(recording);
                // reset the record timer
                RecordTimer.reset();
                // start teh record timer
                RecordTimer.start();
                try {
                    // start recording
                    screenRecorder.startRecording(recConfig);
                } catch (Exception ex) {
                    // notify user about any exception on recording
                    JOptionPane.showMessageDialog(saveButtonLabel, "Cannot record for the given configuration!\nError Info:\n" + ex, "Processor Error", JOptionPane.ERROR_MESSAGE);
                }
            } // else if currently recording then
            else {
                // set the recording flag to false
                isRecording = false;
                // reset the recording button lable to record
                recordButtonLabel.setIcon(record);
                // stop the timer
                RecordTimer.stop();
                // set the record config video length to the record timer calculated duration
                recConfig.setVideoLength(RecordTimer.getTimeInMilliSec());
                try {
                    // stop recording
                    screenRecorder.stopRecording();
                } catch (Exception ex) {
                    // notify user about any exception on recording
                    JOptionPane.showMessageDialog(saveButtonLabel, "Error while stopping the recording!\nError Info:\n" + ex, "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_recordButton_MousePressedEvent

    // method called when frame rate button lable is pressed
    private void frameRateButton_MousePressedEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_frameRateButton_MousePressedEvent
        // TODO add your handling code here:
        // call frame rate selector
        new FrameRateSelector(recConfig);
    }//GEN-LAST:event_frameRateButton_MousePressedEvent

    // method called when capture area button label is pressed
    private void captureAreaButton_MousePressedEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_captureAreaButton_MousePressedEvent
        // TODO add your handling code here:
        // call capture area selector
        new CaptureAreaSelector(recConfig).setVisible(true);
    }//GEN-LAST:event_captureAreaButton_MousePressedEvent

    // method called when watermark button lable is pressed
    private void watermarkButton_MousePressedEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_watermarkButton_MousePressedEvent
        // TODO add your handling code here:
        // call watermark selector 
        new WatermarkSelector(recConfig).setVisible(true);
    }//GEN-LAST:event_watermarkButton_MousePressedEvent

    // method called when cursor button label is pressed
    private void cursorButton_MousePressedEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cursorButton_MousePressedEvent
        // TODO add your handling code here:
        // call cursor selector
        new CursorSelector(recConfig).setVisible(true);
    }//GEN-LAST:event_cursorButton_MousePressedEvent

    // method called when save button lableis pressed
    private void saveButton_MousePressedEvent(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveButton_MousePressedEvent
        // TODO add your handling code here:
        // call save file chooser
        new SaveFileChooser(recConfig);
    }//GEN-LAST:event_saveButton_MousePressedEvent

    // method called when the mouse enters the record button label region
    private void recordButton_MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_recordButton_MouseEntered
        // TODO add your handling code here:
        // if not recording then 
        if (!isRecording) {
            // show the recording icon
            recordButtonLabel.setIcon(recording);
        }
    }//GEN-LAST:event_recordButton_MouseEntered

    // method called when the mouse enters the record button label region
    private void recordButton_MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_recordButton_MouseExited
        // TODO add your handling code here:
        // if not recording 
        if (!isRecording) {
            // show the record icon
            recordButtonLabel.setIcon(record);
        }
    }//GEN-LAST:event_recordButton_MouseExited

    private void aboutLabelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_aboutLabelMousePressed
        // show the about content
        new AboutDialog(null, true).setVisible(true);
    }//GEN-LAST:event_aboutLabelMousePressed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel aboutLabel;
    private javax.swing.JLabel captureAreaButtonLabel;
    private javax.swing.JLabel cursorButtonLabel;
    private javax.swing.JLabel frameRateButtonLabel;
    private javax.swing.JLabel recordButtonLabel;
    private javax.swing.JLabel saveButtonLabel;
    private javax.swing.JLabel watermarkButtonLabel;
    // End of variables declaration//GEN-END:variables

    // getter for  record config
    public RecordConfig getRecConfig() {
        return recConfig;
    }

    // setter for record config
    public void setRecConfig(RecordConfig recConfig) {
        this.recConfig = recConfig;
    }

    // method to check whether the configuration is set for recording
    private boolean isReadyForRecording() {
        // if capture area is not set request user to select the capture area
        if (recConfig.getFrameDimension() == null) {
            JOptionPane.showMessageDialog(saveButtonLabel, "Capture area not set!\nPlease select capture area.", "Insufficient Configuration", JOptionPane.WARNING_MESSAGE);
            return false;
        } // if the frame rate is not set then request user to set the frame rate
        else if (recConfig.getFramesRate() == 0) {
            JOptionPane.showMessageDialog(saveButtonLabel, "Frame rate not set!\nPlease set the frame rate.", "Insufficient Configuration", JOptionPane.WARNING_MESSAGE);
            return false;
        } // if the video save file is not set then request user to select one
        else if (recConfig.getVideoFile() == null) {
            JOptionPane.showMessageDialog(saveButtonLabel, "Save file not set!\nPlease select a file to save the recorded video.", "Insufficient Configuration", JOptionPane.WARNING_MESSAGE);
            return false;
        } // if all the above condition are met then return true indication the 
        // record config is set for recording
        else {
            return true;
        }
    }
}
